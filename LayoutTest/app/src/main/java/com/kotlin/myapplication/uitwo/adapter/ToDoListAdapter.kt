package com.kotlin.myapplication.uitwo.adapterimport android.annotation.SuppressLintimport android.content.Contextimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport com.kotlin.myapplication.BRimport com.kotlin.myapplication.databinding.ItemTodoListBindingimport com.kotlin.myapplication.uione.adapter.BaseAdapterimport com.kotlin.myapplication.uitwo.model.SubTaskimport com.kotlin.myapplication.uitwo.model.TodoListclass ToDoListAdapter(var context: Context) : BaseAdapter<TodoList>(ArrayList()) {    inner class MyViewModel(private val binding: ItemTodoListBinding) :        RecyclerView.ViewHolder(binding.root) {        private var cpbPercent: Int = 0            @SuppressLint("NotifyDataSetChanged")            set(value) {                field = value                with(binding) {                    tvCpbTask.text = value.toString()                    cpbTask.progress = value.toFloat()                }                notifyDataSetChanged()            }        @SuppressLint("NotifyDataSetChanged")        fun bind(todoList: TodoList) {            val adapter = SubTaskAdapter()            adapter.listener = object : SubTaskAdapter.OnSelectedListener {                override fun onSelected(subTask: SubTask, isSelected: Boolean) {                    var total : Int = 0                    if (adapter.list.isNotEmpty()) {                        total = 100 / adapter.list.size                    }                    var isDone = true                    for (item in todoList.subTasks) {                        if (!item.isDone) {                            isDone = false                            break                        }                    }                    if (subTask.isDone) {                        cpbPercent += total                    } else {                        cpbPercent -= total                    }                    todoList.isDone = isDone                    notifyDataSetChanged()                }            }            binding.rvSubTask.adapter = adapter            binding.rvSubTask.layoutManager =                LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false)            if (!todoList.isDone) {                binding.ivDone.visibility = View.GONE                binding.ivNotDone.visibility = View.VISIBLE            } else {                binding.ivDone.visibility = View.VISIBLE                binding.ivNotDone.visibility = View.GONE            }            binding.llStatus.setOnClickListener {                if (!todoList.isDone) {                    binding.ivDone.visibility = View.VISIBLE                    binding.ivNotDone.visibility = View.GONE                    todoList.isDone = true                    cpbPercent = 100                    for (item in todoList.subTasks) {                        item.isDone = true                    }//                    todoList.subTasks.forEach {//                        it.isDone = true//                    }                } else {                    binding.ivNotDone.visibility = View.VISIBLE                    binding.ivDone.visibility = View.GONE                    todoList.isDone = false                    cpbPercent = 0                    for (item in todoList.subTasks) {                        item.isDone = false                    }//                    todoList.subTasks.forEach {//                        it.isDone = false//                    }                }                adapter.notifyDataSetChanged()            }            binding.setVariable(BR.todoList, todoList)            binding.executePendingBindings()        }    }    override fun onCreateViewHolderBase(        parent: ViewGroup?,        viewType: Int    ): RecyclerView.ViewHolder {        val inflater = LayoutInflater.from(parent?.context)        val itemTodoListBinding = ItemTodoListBinding.inflate(inflater, parent, false)        return MyViewModel(itemTodoListBinding)    }    override fun onBindViewHolderBase(holder: RecyclerView.ViewHolder?, position: Int) {        (holder as? MyViewModel)?.apply {            bind(list[position])        }    }}