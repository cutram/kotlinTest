package com.kotlin.myapplication.uione.adapterimport android.view.LayoutInflaterimport android.view.ViewGroupimport android.widget.PopupMenuimport androidx.recyclerview.widget.RecyclerViewimport com.kotlin.myapplication.BRimport com.kotlin.myapplication.Rimport com.kotlin.myapplication.databinding.ItemTagLayoutBindingimport com.kotlin.myapplication.uione.model.Tagclass TagAdapter(val listener: OnItemClickListener? = null) : BaseAdapter<Tag>(ArrayList()) {    //dung interface    interface OnItemClickListener {        fun onDelete(tag: Tag)        fun onShowName(tag: Tag)    }    inner class ViewHolder(private val binding: ItemTagLayoutBinding) :        RecyclerView.ViewHolder(binding.root) {        fun bind(tag: Tag) {            val menu = binding.imageItemTag            val popupMenu = PopupMenu(itemView.context, menu)            popupMenu.menuInflater.inflate(R.menu.menutag, popupMenu.menu)            popupMenu.setOnMenuItemClickListener { menuItem ->                when (menuItem.itemId) {                    R.id.menu_update -> {                        listener?.onShowName(tag)                    }                    R.id.menu_delete -> {                        listener?.onDelete(tag)                    }                }                false            }            binding.llClickUpdate.setOnClickListener {                listener?.onShowName(tag)            }            menu.setOnClickListener {                popupMenu.show()            }            binding.setVariable(BR.tag, tag)            binding.executePendingBindings()        }    }    override fun onCreateViewHolderBase(        parent: ViewGroup?,        viewType: Int    ): RecyclerView.ViewHolder {        val inflater = LayoutInflater.from(parent?.context)        val listItemBinding = ItemTagLayoutBinding.inflate(inflater, parent, false)        return ViewHolder(listItemBinding)    }    override fun onBindViewHolderBase(holder: RecyclerView.ViewHolder?, position: Int) {        (holder as? ViewHolder)?.apply {            bind(list[position])        }    }}