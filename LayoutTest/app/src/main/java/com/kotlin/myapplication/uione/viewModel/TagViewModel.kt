package com.kotlin.myapplication.uione.viewModelimport android.content.Contextimport androidx.databinding.ObservableArrayListimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.kotlin.myapplication.uione.database.AppDatabaseimport com.kotlin.myapplication.uione.model.TagRepositoryimport com.kotlin.myapplication.uione.model.Tagimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchclass TagViewModel(context: Context) : ViewModel() {    private val repository = TagRepository(AppDatabase.getInstance(context).tagDao())    val tags: ObservableArrayList<Tag> = ObservableArrayList()    fun insertTag(tag: Tag, callback: (Tag) -> Unit) {        viewModelScope.launch(Dispatchers.IO) {            repository.addTag(tag)            // TODO: query tag            callback(tag)        }    }    fun getTags(callback: (List<Tag>) -> Unit) {        viewModelScope.launch(Dispatchers.Main) {            val data = repository.getTags()            callback(data)        }    }    fun deleteTag(id: Int, callback: (List<Tag>) -> Unit) {        viewModelScope.launch(Dispatchers.IO) {            repository.delete(id)            callback(tags)        }    }    fun updateTag(name: String, id: Int, callback: (List<Tag>) -> Unit){        viewModelScope.launch(Dispatchers.IO){            repository.updateTag(name, id)            callback(tags)        }    }}